from aiogram import F, Router, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class LanguageSelection(StatesGroup):
    waiting_for_language = State()
    selected_language = State()  

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def create_language_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_russian"),
                InlineKeyboardButton(text="English üá¨üáß", callback_data="lang_english")
            ]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    sent_message = await message.answer(
        "üá∑üá∫|| –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —è–∑—ã–∫–æ–≤:\n\n"
        "üá¨üáß|| To use the tool, please, choose one of the languages:",
        reply_markup=create_language_keyboard()
    )
    await state.update_data(start_message_id=sent_message.message_id)
    await state.set_state(LanguageSelection.waiting_for_language)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@router.callback_query(LanguageSelection.waiting_for_language, F.data.startswith("lang_"))
async def process_language_selection(query: CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    selected_language = query.data.split("_")[1]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_mention = f"@{query.from_user.username}" if query.from_user.username else query.from_user.full_name

    # –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if selected_language == "russian":
        await query.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å, {user_mention} üéâ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!"
        )
        await query.message.answer(
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤ \"–ì–∞–π–¥–µ\"."
        )

    elif selected_language == "english":
        await query.message.answer(
            f"Welcome, {user_mention} üéâ\nLet's get started!"
        )
        await query.message.answer(
            "At first we recommend you to deep dive into service's traits in the \"Guide\"."
        )

    # –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.message.edit_reply_markup(reply_markup=None)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    data = await state.get_data()
    start_message_id = data.get("start_message_id")
    if start_message_id:
        await query.bot.delete_message(chat_id=query.message.chat.id, message_id=start_message_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(selected_language=selected_language)
    await state.set_state(LanguageSelection.selected_language)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    from handlers.main_menu import show_main_menu
    await show_main_menu(query.message, selected_language)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_start_handlers(dp: Dispatcher):
    dp.include_router(router)
