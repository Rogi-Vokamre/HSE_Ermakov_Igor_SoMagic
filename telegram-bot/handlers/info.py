from aiogram import F, Router, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –¢–µ–∫—Å—Ç—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
INFO_TEXT_RUS = (
    "üìö C–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–≤—É—Ö –≤–µ—Ä—Å–∏—è—Ö —Å —Ä–∞–∑–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:\n" 
    "üü° MINI - –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
    "üü° PRO - –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏.\n\n"
    "1Ô∏è‚É£ –í–µ—Ä—Å–∏—è MINI\n"
    "‚ûñ –í —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–æ–≤–µ—Ä–∫–∏\" —É–∫–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –ø–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∏–Ω–≥–µ –∞–¥—Ä–µ—Å–∞.\n"
    "‚ûñ –í —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–æ—Ñ–∏–ª—å\" —É–∫–∞–∑–∞–Ω —Ç–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.\n\n"
    "2Ô∏è‚É£ –í–µ—Ä—Å–∏—è PRO\n"
    "‚ûñ –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"Open\".\n"
    "‚ûñ –í —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–æ–≤–µ—Ä–∫–∏\" —É–∫–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –ø–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∏–Ω–≥–µ –∞–¥—Ä–µ—Å–∞.\n"
    "‚ûñ –í —Ä–∞–∑–¥–µ–ª–µ \"–ì–∞–π–¥\" –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
)

INFO_TEXT_ENG = (
    "üìö The service is available in two modes with different traits:\n" 
    "üü° MINI - bot for quickly checking crypto.\n"
    "üü° PRO - mini-app for checking crypto in details and managing reports.\n\n"
    "1Ô∏è‚É£ MINI Mode\n"
    "‚ûñ In \"Check\" section insert a crypto address and get a crypto's risk notification.\n"
    "‚ûñ In \"Profile\" find your plan and number of available checks.\n\n"
    "2Ô∏è‚É£ PRO Mode\n"
    "‚ûñ Click \"Open\" button to use mini-app.\n"
    "‚ûñ In \"Check\" section insert a crypto address and get a crypto's risk profile report in details.\n"
    "‚ûñ In \"Guide\" section deep dive into detailed info about mini-app."
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def create_info_back_keyboard(language: str):
    if language == "russian":
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
            ]
        )
    elif language == "english":
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="Back", callback_data="back_to_main_menu")]
            ]
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
@router.callback_query(F.data.startswith("info_"))
async def show_info(query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    selected_language = data.get("selected_language", "russian")

    # –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if selected_language == "russian":
        await query.message.answer(
            INFO_TEXT_RUS,
            reply_markup=create_info_back_keyboard("russian")
        )
    elif selected_language == "english":
        await query.message.answer(
            INFO_TEXT_ENG,
            reply_markup=create_info_back_keyboard("english")
        )

    # –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.message.edit_reply_markup(reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@router.callback_query(F.data =="back_to_main_menu")
async def back_to_main_menu(query: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    selected_language = data.get("selected_language", "russian")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from handlers.main_menu import show_main_menu
    await show_main_menu(query.message, selected_language)
    await query.message.edit_reply_markup(reply_markup=None)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_info_handlers(dp: Dispatcher):
    dp.include_router(router)
